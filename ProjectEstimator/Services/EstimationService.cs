using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using ProjectEstimatorApp.Models;
using ProjectEstimatorApp.Services.Interfaces;

namespace ProjectEstimatorApp.Services
{
    public class EstimationService : IEstimationService
    {
        private readonly IOpenAIService _openAIService;
        private readonly ILogger<EstimationService> _logger;

        public EstimationService(IOpenAIService openAIService, ILogger<EstimationService> logger)
        {
            _openAIService = openAIService;
            _logger = logger;
        }

        public async Task<ProjectEstimation> EstimateProjectAsync(EstimationRequest request)
        {
            _logger.LogInformation($"üöÄ Iniciando estimaci√≥n para proyecto: {request.ProjectName}");

            var estimation = new ProjectEstimation
            {
                ProjectName = request.ProjectName,
                InitialPrompt = request.InitialPrompt,
                DocumentContent = request.DocumentContent,
                Status = EstimationStatus.Processing
            };

            try
            {
                if (_openAIService.IsConfigured())
                {
                    _logger.LogInformation("‚úÖ OpenAI configurado, usando GPT-5 para estimaci√≥n");
                    estimation = await ExtractTasksWithGPT5(request.DocumentContent, request.InitialPrompt, request.ProjectName);

                    if (estimation.Tasks.Any())
                    {
                        estimation.Status = EstimationStatus.Completed;
                        _logger.LogInformation($"‚úÖ Estimaci√≥n completada: {estimation.Tasks.Count} tareas, {estimation.TotalEstimatedHours} horas totales");
                    }
                    else
                    {
                        _logger.LogWarning("‚ö†Ô∏è GPT-5 no devolvi√≥ tareas, usando estimaci√≥n local");
                        estimation = GetSampleEstimation(request.ProjectName, request.InitialPrompt + " " + request.DocumentContent);
                    }
                }
                else
                {
                    _logger.LogWarning("‚ö†Ô∏è OpenAI no configurado, usando estimaci√≥n local");
                    await Task.Delay(2000); // Simular procesamiento
                    estimation = GetSampleEstimation(request.ProjectName, request.InitialPrompt + " " + request.DocumentContent);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå Error durante la estimaci√≥n");
                estimation.Status = EstimationStatus.Failed;
                estimation.AnalysisResult = $"Error: {ex.Message}";

                // Si falla OpenAI, usar estimaci√≥n local
                _logger.LogInformation("üîÑ Fallback a estimaci√≥n local debido a error");
                estimation = GetSampleEstimation(request.ProjectName, request.InitialPrompt + " " + request.DocumentContent);
                estimation.AnalysisResult = $"Nota: Se us√≥ estimaci√≥n local debido a: {ex.Message}";
            }

            return estimation;
        }

        private async Task<ProjectEstimation> ExtractTasksWithGPT5(string documentContent, string additionalContext, string projectName)
        {
            _logger.LogInformation("üìù Preparando prompt optimizado para GPT-5...");

            var systemPrompt = @"# ROL Y CONTEXTO
Eres un experto analista de proyectos con m√°s de 20 a√±os de experiencia en desarrollo empresarial.
Especializado en el stack Microsoft: .NET 8, C#, Blazor, SQL Server.
Especializado tambi√©n en el uso y desarrollo para A3erp
Tu precisi√≥n y profesionalismo son fundamentales para el √©xito de los proyectos.

# OBJETIVO PRINCIPAL
Analizar documentos de dise√±o funcional/t√©cnico y generar estimaciones detalladas, realistas y accionables para proyectos de desarrollo de software.

# PROCESO DE AN√ÅLISIS ESTRUCTURADO

## FASE 1: EXTRACCI√ìN Y COMPRENSI√ìN
Del documento proporcionado, identificar sistem√°ticamente:
- Secci√≥n 1: Introducci√≥n ‚Üí Contexto general y visi√≥n del proyecto
- Secci√≥n 2: Objetivos de negocio ‚Üí Alcance, prioridades y KPIs esperados
- Secci√≥n 3: Requerimientos funcionales ‚Üí Funcionalidades espec√≠ficas a desarrollar
- Secci√≥n 4: Requerimientos no funcionales ‚Üí Restricciones t√©cnicas, rendimiento, seguridad
- Arquitectura propuesta ‚Üí Componentes, integraciones, infraestructura
- Restricciones ‚Üí Tiempo, presupuesto, recursos disponibles

## FASE 2: IDENTIFICACI√ìN DE RIESGOS Y AMBIG√úEDADES
Antes de proceder con la estimaci√≥n, identificar y listar:
- ‚ùó Informaci√≥n faltante cr√≠tica
- ‚ö†Ô∏è Ambig√ºedades que afectan la estimaci√≥n
- üîÑ Dependencias externas no clarificadas
- üö® Riesgos t√©cnicos identificados
- üí° Suposiciones realizadas para la estimaci√≥n

## FASE 3: DESCOMPOSICI√ìN DE TAREAS
Principios de descomposici√≥n:
- M√°ximo 8 horas por tarea individual (idealmente 2-4 horas)
- Cada tarea debe ser verificable y entregable
- **PRINCIPIO DE EFICIENCIA**: Antes de desglosar, evaluar si las subtareas pueden: 
* Ejecutarse de forma paralela o integrada (an√°lisis + desarrollo)
 * Reutilizar c√≥digo, templates o componentes existentes 
* Beneficiarse de herramientas automatizadas o experiencia previa 
- **REGLA DE GRANULARIDAD ADAPTATIVA**: 
* Si el total estimado < 100 horas: Agrupar tareas relacionadas (ej: ""Desarrollo completo del m√≥dulo X"" en vez de separar an√°lisis+l√≥gica+UI) 
* Si el total estimado > 150 horas: Mantener desglose granular para mejor control
- Incluir TODAS las actividades del ciclo de desarrollo:
  
  * PREPARACI√ìN:
    - Configuraci√≥n del entorno de desarrollo
    - Setup de proyecto y arquitectura base
    - Configuraci√≥n de base de datos
    - Configuraci√≥n de CI/CD pipelines
  
  * DESARROLLO CORE:
    - Modelado de datos y creaci√≥n de esquemas
    - Desarrollo de capa de acceso a datos
    - L√≥gica de negocio y servicios
    - APIs y endpoints
    - Interfaces de usuario
    - Integraciones con sistemas externos
  
  * CALIDAD:
    - Pruebas unitarias (m√≠nimo 70% cobertura)
    - Pruebas de integraci√≥n
    - Pruebas de rendimiento
    - Pruebas de seguridad
    - Pruebas de aceptaci√≥n de usuario
  
  * DOCUMENTACI√ìN:
    - Documentaci√≥n t√©cnica
    - Documentaci√≥n de API
    - Manual de usuario
    - Gu√≠a de despliegue
    - Documentaci√≥n de mantenimiento
  
  * DESPLIEGUE Y ESTABILIZACI√ìN:
    - Preparaci√≥n de ambientes
    - Migraci√≥n de datos
    - Despliegue a producci√≥n
    - Monitoreo post-despliegue
    - Soporte post-producci√≥n inicial

## FASE 4: ESTIMACI√ìN REALISTA Y AJUSTADA

### Base de c√°lculo:
- Desarrollador de nivel MEDIO (3-5 a√±os de experiencia)
- Jornada efectiva de 6 horas productivas (no 8)
- Velocidad est√°ndar, no heroica

### Factores de ajuste obligatorios:
- Investigaci√≥n t√©cnica: +5% del tiempo de desarrollo
- Inicio de proyecto y crear entorno: +2% del tiempo de desarrollo
- Debugging y resoluci√≥n de issues: +10% del tiempo de desarrollo
- Code review y refactoring: +10% del tiempo de desarrollo
- Reuniones y comunicaci√≥n: +10% del tiempo total
- Retrabajos y cambios menores: +10% del tiempo total
- Formaci√≥n de los usuarios: +5% del tiempo de desarrollo
-Instalaci√≥n: +1% del tiempo de desarrollo

### Multiplicadores contextuales:
- Primera vez con una tecnolog√≠a: x1.3
- Integraciones con sistemas externos: x1.2
- Requisitos de alta disponibilidad (99.9%+): x1.15
- M√∫ltiples idiomas/localizaci√≥n: x1.1
- Requisitos regulatorios (GDPR, etc.): x1.2
- Proyecto legacy/c√≥digo existente: x1.25

### Factores de equipo (si se especifica):
- Equipo junior (< 2 a√±os exp): x1.5
- Equipo medio (2-5 a√±os exp): x1.0
- Equipo senior (> 5 a√±os exp): x0.8
- Equipo distribuido/remoto: x1.1
**FACTOR DE EFICIENCIA POR SIMPLICIDAD:**
 - Si estimaci√≥n base < 100 horas: Aplicar descuento del 15% por eficiencias de coordinaci√≥n y reutilizaci√≥n

# CALIBRACI√ìN AUTOM√ÅTICA POR COMPLEJIDAD
 ## Evaluaci√≥n inicial de complejidad: Antes de la estimaci√≥n final, evaluar:
 - ¬øRequiere m√°s de 5 m√≥dulos independientes? ‚Üí Proyecto Grande
 - ¬øInvolucra m√°s de 3 integraciones externas? ‚Üí Proyecto Grande 
- ¬øEstimaci√≥n base > 120 horas? ‚Üí Proyecto Grande 
- ¬øMenos de 10 funcionalidades principales? ‚Üí Proyecto Peque√±o
 ## Ajustes por tipo de proyecto: ### PROYECTOS PEQUE√ëOS (criterios anteriores no cumplidos):
 - **Documentaci√≥n**: M√°ximo 5% del desarrollo (no 10%) 
- **Testing**: 15% del desarrollo (enfoque pragm√°tico, no exhaustivo) 
- **Gesti√≥n**: M√°ximo 8 horas totales 
- **RQNF m√≠nimos**: Instalaci√≥n (1-2h), Formaci√≥n (2-4h), Soporte inicial (4-6h)
 - **Reutilizaci√≥n**: Asumir 20% de eficiencia por componentes/c√≥digo existente 
### PROYECTOS GRANDES: 
- Mantener porcentajes est√°ndar del sistema original - Aplicar todos los factores de contingencia
# FORMATO DE SALIDA ESTRUCTURADO

## üìã RESUMEN EJECUTIVO
- Nombre del proyecto: [Nombre]
- Complejidad general: [Baja/Media/Alta/Muy Alta]
- Riesgos principales: [Lista de 3-7 riesgos cr√≠ticos]
- Confianza en la estimaci√≥n: [Alta ¬±5% / Media ¬±15% / Baja ¬±25%]

## üéØ [M√ìDULO/√âPICA/FUNCIONALIDAD]

### Contexto del m√≥dulo
[Breve descripci√≥n del objetivo y valor de negocio]

### Tareas detalladas:

#### ‚úÖ [Nombre espec√≠fico de la tarea]
üìù **Descripci√≥n**: [Qu√© se debe hacer exactamente]
üîß **Tipo**: [Backend/Frontend/Database/Testing/Documentation/DevOps/Infrastructure]
üë§ **Perfil requerido**: [Junior/Middle/Senior] - [Habilidades espec√≠ficas]
‚è±Ô∏è **Tiempo estimado**: [X horas]
‚ö†Ô∏è **Dependencias**: [Tareas previas requeridas]
üéØ **Criterios de aceptaci√≥n**: [C√≥mo validar que est√° completa]
üìä **Complejidad**: [Simple/Media/Compleja/Muy Compleja]

### üìä Subtotal m√≥dulo: 
- Desarrollo: XX horas
- Testing: XX horas
- Documentaci√≥n: XX horas
- **Total m√≥dulo: XX horas**

## üí∞ RESUMEN FINAL DE ESTIMACI√ìN

### Desglose por tipo de actividad:
- **Desarrollo core**: XX horas (X%)
- **Testing y QA**: XX horas (X%)
- **Documentaci√≥n**: XX horas (X%)
- **DevOps/Infraestructura**: XX horas (X%)
- **Gesti√≥n y comunicaci√≥n**: XX horas (X%)

### Desglose por tecnolog√≠a:
- **Backend (.NET/C#)**: XX horas
- **Frontend (Blazor)**: XX horas
- **Base de datos (SQL Server)**: XX horas
- **Integraciones**: XX horas

### C√°lculo final:
- **Subtotal tareas**: XX horas
- **Buffer contingencia (15%)**: XX horas
- **Margen de error (¬±X%)**: XX-XX horas

### üéØ **TOTAL PROYECTO: XXX horas**

### Conversi√≥n a tiempo calendario:
- **En d√≠as laborables**: XX d√≠as
- **En semanas (1 desarrollador)**: XX semanas
- **En semanas (equipo de X)**: XX semanas

## üìà CRONOGRAMA SUGERIDO

### Sprint 1-2: Fundaci√≥n (X horas)
- [Lista de tareas prioritarias]

### Sprint 3-4: Desarrollo Core (X horas)
- [Lista de funcionalidades principales]

### Sprint 5-6: Integraciones y Polish (X horas)
- [Lista de tareas de integraci√≥n y mejora]

### Sprint 7: Testing y Estabilizaci√≥n (X horas)
- [Lista de actividades de QA]

### Sprint 8: Despliegue y Documentaci√≥n (X horas)
- [Lista de tareas finales]

## ‚ö†Ô∏è NOTAS Y CONSIDERACIONES IMPORTANTES
- [Supuestos realizados]
- [Riesgos no mitigados]
- [Recomendaciones t√©cnicas]
- [Dependencias externas cr√≠ticas]

# REGLAS DE NEGOCIO PARA LA ESTIMACI√ìN

1. NUNCA subestimar tareas de infraestructura y configuraci√≥n
2. SIEMPRE incluir tiempo para pruebas (m√≠nimo 25% del desarrollo)
3. SIEMPRE incluir documentaci√≥n (m√≠nimo 10% del desarrollo)
4. NUNCA asumir que las integraciones funcionar√°n a la primera
5. SIEMPRE considerar tiempo de aprendizaje para tecnolog√≠as nuevas
6. INCLUIR tiempo para correcci√≥n de bugs post-despliegue en tareas individuales
7. CONSIDERAR la deuda t√©cnica en proyectos existentes
8. NUNCA sobreestimes tareas relacionadas con A3erp. La estructura de A3ERP es bien conocida y las tareas relacionadas se hacen r√°pido
9. **REGLA DE PROPORCIONALIDAD**: En funcionalidades similares, la segunda y subsecuentes toman 60-70% del tiempo de la primera (efecto aprendizaje) 
10. **REGLA DE CONTEXTO A3ERP**: Reconocer patrones est√°ndar de A3ERP para reducir estimaciones en m√≥dulos t√≠picos 
11. **REGLA DE SIMPLICIDAD**: Si una tarea toma menos de 1 hora, considerar integrarla con tareas relacionadas 
12. **REGLA DE REALISMO**: Cuestionar estimaciones que resulten en m√°s de 20 horas por funcionalidad simple (CRUD b√°sico, formularios est√°ndar)

# ESTRUCTURA JSON DE RESPUESTA

Devuelve SIEMPRE un JSON con esta estructura exacta:

{
  ""projectName"": ""string"",
  ""complexity"": ""Low|Medium|High|VeryHigh"",
  ""confidence"": ""High|Medium|Low"",
  ""totalHours"": number,
  ""contingencyHours"": number,
  ""tasks"": [
    {
      ""id"": ""string"",
      ""name"": ""string"",
      ""description"": ""string"",
      ""category"": ""Backend|Frontend|Database|Infrastructure|Testing|Documentation|DevOps|Architecture"",
      ""complexity"": ""Simple|Medium|Complex|VeryComplex"",
      ""estimatedHours"": number,
      ""requiredProfile"": ""Junior|Middle|Senior"",
      ""dependencies"": [""taskId""],
      ""acceptanceCriteria"": [""string""],
      ""risks"": [""string""]
    }
  ],
  ""summary"": {
    ""developmentHours"": number,
    ""testingHours"": number,
    ""documentationHours"": number,
    ""infrastructureHours"": number,
    ""managementHours"": number
  },
  ""assumptions"": [""string""],
  ""risks"": [""string""],
  ""recommendations"": [""string""]
}";

            var userPrompt = $@"INFORMACI√ìN DEL CONTEXTO DEL PROYECTO:
El desarrollo se har√° por parte de un solo desarrollador. No se van a hacer pruebas unitarias.

DOCUMENTO DE DISE√ëO A ANALIZAR:
{documentContent}

CONTEXTO ADICIONAL DEL USUARIO:
{additionalContext}

NOMBRE DEL PROYECTO:
{projectName}

INSTRUCCIONES ESPEC√çFICAS:
1. Analiza el documento completo identificando todos los requisitos
2. Identifica cualquier ambig√ºedad o informaci√≥n faltante
3. Genera una estimaci√≥n detallada siguiendo la estructura definida
4. Incluye todos los tipos de tareas necesarias (desarrollo, testing, documentaci√≥n, etc.)
5. Aplica los factores de ajuste apropiados seg√∫n el contexto
6. Proporciona un cronograma realista
7. Lista todos los riesgos y suposiciones

Por favor, genera una estimaci√≥n completa y profesional para este proyecto.";

            try
            {
                _logger.LogInformation("üì§ Enviando solicitud a GPT-5...");
                var response = await _openAIService.GetCompletionAsync(systemPrompt, userPrompt);

                _logger.LogInformation($"üì• Respuesta recibida, procesando JSON...");

                // Intentar extraer JSON de la respuesta
                var jsonStart = response.IndexOf("{");
                var jsonEnd = response.LastIndexOf("}") + 1;

                if (jsonStart >= 0 && jsonEnd > jsonStart)
                {
                    var jsonResponse = response.Substring(jsonStart, jsonEnd - jsonStart);

                    _logger.LogDebug($"üîç JSON extra√≠do: {jsonResponse.Substring(0, Math.Min(500, jsonResponse.Length))}...");

                    var options = new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true,
                        AllowTrailingCommas = true,
                        ReadCommentHandling = JsonCommentHandling.Skip
                    };

                    var result = JsonSerializer.Deserialize<OpenAIEstimationResponse>(jsonResponse, options);

                    if (result != null && result.Tasks != null && result.Tasks.Any())
                    {
                        _logger.LogInformation($"‚úÖ JSON parseado exitosamente: {result.Tasks.Count} tareas");
                        return ConvertToEstimation(result);
                    }
                    else
                    {
                        _logger.LogWarning("‚ö†Ô∏è El JSON no contiene tareas v√°lidas");
                    }
                }
                else
                {
                    _logger.LogWarning("‚ö†Ô∏è No se encontr√≥ JSON v√°lido en la respuesta de GPT-5");
                    _logger.LogDebug($"Respuesta completa: {response}");
                }
            }
            catch (JsonException ex)
            {
                _logger.LogError(ex, "‚ùå Error al parsear JSON de GPT-5");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå Error al procesar respuesta de GPT-5");
                throw;
            }

            // Si llegamos aqu√≠, algo fall√≥
            return new ProjectEstimation
            {
                ProjectName = projectName,
                Status = EstimationStatus.Failed,
                Tasks = new List<DevelopmentTask>(),
                AnalysisResult = "No se pudo procesar la respuesta de GPT-5"
            };
        }

        private ProjectEstimation ConvertToEstimation(OpenAIEstimationResponse result)
        {
            var estimation = new ProjectEstimation
            {
                ProjectName = result.ProjectName ?? "Proyecto",
                Complexity = Enum.TryParse<ProjectComplexity>(result.Complexity, true, out var comp)
                    ? comp : ProjectComplexity.Medium,
                Confidence = Enum.TryParse<ConfidenceLevel>(result.Confidence, true, out var conf)
                    ? conf : ConfidenceLevel.Medium,
                TotalEstimatedHours = result.TotalHours,
                ContingencyHours = result.ContingencyHours > 0 ? result.ContingencyHours : result.TotalHours * 0.15,
                Tasks = ConvertTasks(result.Tasks),
                Summary = result.Summary ?? new EstimationSummary(),
                Assumptions = result.Assumptions ?? new List<string>(),
                Risks = result.Risks ?? new List<string>(),
                Recommendations = result.Recommendations ?? new List<string>(),
                Status = EstimationStatus.Completed
            };

            // Recalcular totales si es necesario
            if (estimation.TotalEstimatedHours == 0)
            {
                estimation.TotalEstimatedHours = estimation.Tasks.Sum(t => t.EstimatedHours);
            }

            if (estimation.ContingencyHours == 0)
            {
                estimation.ContingencyHours = estimation.TotalEstimatedHours * 0.15;
            }

            return estimation;
        }

        private List<DevelopmentTask> ConvertTasks(List<OpenAITask> tasks)
        {
            if (tasks == null || !tasks.Any())
            {
                _logger.LogWarning("‚ö†Ô∏è No hay tareas para convertir");
                return new List<DevelopmentTask>();
            }

            var convertedTasks = new List<DevelopmentTask>();

            foreach (var task in tasks)
            {
                try
                {
                    var convertedTask = new DevelopmentTask
                    {
                        TaskId = task.Id ?? $"TASK-{convertedTasks.Count + 1:D3}",
                        Name = task.Name ?? "Tarea sin nombre",
                        Description = task.Description ?? "",
                        Category = Enum.TryParse<TaskCategory>(task.Category, true, out var cat)
                            ? cat : TaskCategory.Backend,
                        Complexity = Enum.TryParse<ComplexityLevel>(task.Complexity, true, out var comp)
                            ? comp : ComplexityLevel.Medium,
                        EstimatedHours = task.EstimatedHours > 0 ? task.EstimatedHours : 8,
                        RequiredProfile = Enum.TryParse<ProfileLevel>(task.RequiredProfile, true, out var prof)
                            ? prof : ProfileLevel.Middle,
                        Dependencies = task.Dependencies ?? new List<string>(),
                        AcceptanceCriteria = task.AcceptanceCriteria ?? new List<string>(),
                        TaskRisks = task.Risks ?? new List<string>()
                    };

                    convertedTasks.Add(convertedTask);
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, $"‚ùå Error convirtiendo tarea: {task.Name}");
                }
            }

            _logger.LogInformation($"‚úÖ Convertidas {convertedTasks.Count} tareas exitosamente");
            return convertedTasks;
        }

        public ProjectEstimation GetSampleEstimation(string projectName, string prompt)
        {
            _logger.LogInformation("üîÑ Generando estimaci√≥n local de ejemplo");

            var tasks = new List<DevelopmentTask>
            {
                new DevelopmentTask
                {
                    TaskId = "LOCAL-001",
                    Name = "Configuraci√≥n inicial (Estimaci√≥n Local)",
                    Description = "Esta es una estimaci√≥n de ejemplo. Configure su API Key de OpenAI para obtener estimaciones reales con GPT-5.",
                    Category = TaskCategory.Architecture,
                    Complexity = ComplexityLevel.Simple,
                    EstimatedHours = 8,
                    RequiredProfile = ProfileLevel.Middle,
                    AcceptanceCriteria = new List<string> { "Proyecto configurado", "Dependencias instaladas" }
                }
            };

            // Agregar m√°s tareas basadas en palabras clave
            var promptLower = prompt.ToLower();

            if (promptLower.Contains("database") || promptLower.Contains("sql") || promptLower.Contains("datos"))
            {
                tasks.Add(new DevelopmentTask
                {
                    TaskId = "LOCAL-002",
                    Name = "Dise√±o de base de datos (Estimaci√≥n Local)",
                    Description = "Estimaci√≥n local b√°sica para base de datos",
                    Category = TaskCategory.Database,
                    Complexity = ComplexityLevel.Medium,
                    EstimatedHours = 24,
                    RequiredProfile = ProfileLevel.Middle
                });
            }

            if (promptLower.Contains("api") || promptLower.Contains("rest") || promptLower.Contains("backend"))
            {
                tasks.Add(new DevelopmentTask
                {
                    TaskId = "LOCAL-003",
                    Name = "API REST (Estimaci√≥n Local)",
                    Description = "Estimaci√≥n local b√°sica para API",
                    Category = TaskCategory.Backend,
                    Complexity = ComplexityLevel.Complex,
                    EstimatedHours = 40,
                    RequiredProfile = ProfileLevel.Senior
                });
            }

            if (promptLower.Contains("frontend") || promptLower.Contains("ui") || promptLower.Contains("interfaz"))
            {
                tasks.Add(new DevelopmentTask
                {
                    TaskId = "LOCAL-004",
                    Name = "Interfaz de Usuario (Estimaci√≥n Local)",
                    Description = "Estimaci√≥n local b√°sica para frontend",
                    Category = TaskCategory.Frontend,
                    Complexity = ComplexityLevel.Complex,
                    EstimatedHours = 48,
                    RequiredProfile = ProfileLevel.Middle
                });
            }

            // Siempre agregar testing
            tasks.Add(new DevelopmentTask
            {
                TaskId = "LOCAL-TEST",
                Name = "Testing (Estimaci√≥n Local)",
                Description = "Pruebas unitarias e integraci√≥n",
                Category = TaskCategory.Testing,
                Complexity = ComplexityLevel.Medium,
                EstimatedHours = 16,
                RequiredProfile = ProfileLevel.Middle
            });

            // Siempre agregar documentaci√≥n
            tasks.Add(new DevelopmentTask
            {
                TaskId = "LOCAL-DOC",
                Name = "Documentaci√≥n (Estimaci√≥n Local)",
                Description = "Documentaci√≥n t√©cnica y de usuario",
                Category = TaskCategory.Documentation,
                Complexity = ComplexityLevel.Simple,
                EstimatedHours = 8,
                RequiredProfile = ProfileLevel.Middle
            });

            return new ProjectEstimation
            {
                ProjectName = projectName + " (ESTIMACI√ìN LOCAL)",
                Status = EstimationStatus.Completed,
                Tasks = tasks,
                TotalEstimatedHours = tasks.Sum(t => t.EstimatedHours),
                ContingencyHours = tasks.Sum(t => t.EstimatedHours) * 0.15,
                Complexity = ProjectComplexity.Medium,
                Confidence = ConfidenceLevel.Low,
                Summary = new EstimationSummary
                {
                    DevelopmentHours = tasks.Where(t => t.Category == TaskCategory.Backend ||
                                                       t.Category == TaskCategory.Frontend ||
                                                       t.Category == TaskCategory.Database).Sum(t => t.EstimatedHours),
                    TestingHours = tasks.Where(t => t.Category == TaskCategory.Testing).Sum(t => t.EstimatedHours),
                    DocumentationHours = tasks.Where(t => t.Category == TaskCategory.Documentation).Sum(t => t.EstimatedHours),
                    InfrastructureHours = tasks.Where(t => t.Category == TaskCategory.Infrastructure ||
                                                          t.Category == TaskCategory.DevOps).Sum(t => t.EstimatedHours),
                    ManagementHours = tasks.Sum(t => t.EstimatedHours) * 0.15
                },
                Assumptions = new List<string>
                {
                    "‚ö†Ô∏è NOTA: Esta es una estimaci√≥n local de ejemplo",
                    "Configure OpenAI GPT-5 para estimaciones reales y detalladas",
                    "GPT-5 proporciona an√°lisis mucho m√°s profundo y preciso",
                    "Equipo con experiencia en las tecnolog√≠as requeridas",
                    "Requisitos estables y bien definidos"
                },
                Risks = new List<string>
                {
                    "Estimaci√≥n no basada en an√°lisis real del proyecto",
                    "Sin validaci√≥n de IA avanzada",
                    "Posibles cambios en requisitos",
                    "Dependencias externas no identificadas"
                },
                Recommendations = new List<string>
                {
                    "Configure su API Key de OpenAI en appsettings.json",
                    "Use GPT-5 para obtener estimaciones de nivel profesional",
                    "GPT-5 identifica riesgos y dependencias autom√°ticamente",
                    "Revisar estimaciones con el equipo t√©cnico",
                    "Considerar buffer adicional para imprevistos"
                }
            };
        }

        // Clases para deserializaci√≥n de respuesta de GPT-5
        private class OpenAIEstimationResponse
        {
            public string ProjectName { get; set; }
            public string Complexity { get; set; }
            public string Confidence { get; set; }
            public double TotalHours { get; set; }
            public double ContingencyHours { get; set; }
            public List<OpenAITask> Tasks { get; set; }
            public EstimationSummary Summary { get; set; }
            public List<string> Assumptions { get; set; }
            public List<string> Risks { get; set; }
            public List<string> Recommendations { get; set; }
        }

        private class OpenAITask
        {
            public string Id { get; set; }
            public string Name { get; set; }
            public string Description { get; set; }
            public string Category { get; set; }
            public string Complexity { get; set; }
            public double EstimatedHours { get; set; }
            public string RequiredProfile { get; set; }
            public List<string> Dependencies { get; set; }
            public List<string> AcceptanceCriteria { get; set; }
            public List<string> Risks { get; set; }
        }
    }
}